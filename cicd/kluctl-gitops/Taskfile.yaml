version: "3"

tasks:
  # TODO add stage

  get-webui-password:
    desc: "Get password for kluctl web ui admin user"
    cmds:
      - kubectl -n kluctl-system get secret webui-secret -o jsonpath='{.data.admin-password}' | base64 -d

  port-forward-webui:
    desc: "Port forward web UI to localhost"
    cmds:
      - kubectl -n kluctl-system port-forward svc/kluctl-webui 8080

  deploy-production-cluster:
    desc: "Deploy kluctl gitops production target with git and docker credentials"
    vars:
      GITHUB_USERNAME: '{{.GITHUB_USERNAME | default ""}}'
      GITHUB_PAT: '{{.GITHUB_PAT | default ""}}'
      DOCKER_USERNAME: '{{.DOCKER_USERNAME | default ""}}'
      DOCKER_PASSWORD: '{{.DOCKER_PASSWORD | default ""}}'
      DOCKER_EMAIL: '{{.DOCKER_EMAIL | default ""}}'
    cmds:
      - |
        if [ -z "{{.GITHUB_USERNAME}}" ]; then
          echo "Error: GITHUB_USERNAME is required"
          echo "Usage: task deploy-production-cluster GITHUB_USERNAME=\$GITHUB_USERNAME GITHUB_PAT=\$GITHUB_PAT DOCKER_USERNAME=\$DOCKER_USERNAME DOCKER_PASSWORD=\$DOCKER_PASSWORD DOCKER_EMAIL=\$DOCKER_EMAIL"
          exit 1
        fi
        if [ -z "{{.GITHUB_PAT}}" ]; then
          echo "Error: GITHUB_PAT is required"
          echo "Usage: task deploy-production-cluster GITHUB_USERNAME=\$GITHUB_USERNAME GITHUB_PAT=\$GITHUB_PAT DOCKER_USERNAME=\$DOCKER_USERNAME DOCKER_PASSWORD=\$DOCKER_PASSWORD DOCKER_EMAIL=\$DOCKER_EMAIL"
          exit 1
        fi
        if [ -z "{{.DOCKER_USERNAME}}" ]; then
          echo "Error: DOCKER_USERNAME is required for private image access"
          echo "Usage: task deploy-production-cluster GITHUB_USERNAME=\$GITHUB_USERNAME GITHUB_PAT=\$GITHUB_PAT DOCKER_USERNAME=\$DOCKER_USERNAME DOCKER_PASSWORD=\$DOCKER_PASSWORD DOCKER_EMAIL=\$DOCKER_EMAIL"
          exit 1
        fi
        if [ -z "{{.DOCKER_PASSWORD}}" ]; then
          echo "Error: DOCKER_PASSWORD is required for private image access"
          echo "Usage: task deploy-production-cluster GITHUB_USERNAME=\$GITHUB_USERNAME GITHUB_PAT=\$GITHUB_PAT DOCKER_USERNAME=\$DOCKER_USERNAME DOCKER_PASSWORD=\$DOCKER_PASSWORD DOCKER_EMAIL=\$DOCKER_EMAIL"
          exit 1
        fi
        if [ -z "{{.DOCKER_EMAIL}}" ]; then
          echo "Error: DOCKER_EMAIL is required for private image access"
          echo "Usage: task deploy-production-cluster GITHUB_USERNAME=\$GITHUB_USERNAME GITHUB_PAT=\$GITHUB_PAT DOCKER_USERNAME=\$DOCKER_USERNAME DOCKER_PASSWORD=\$DOCKER_PASSWORD DOCKER_EMAIL=\$DOCKER_EMAIL"
          exit 1
        fi
        echo "Deploying production cluster with GitHub and Docker credentials..."
        echo "Using GitHub username: {{.GITHUB_USERNAME}}"
        echo "Using Docker username: {{.DOCKER_USERNAME}}"
        kluctl helm-pull
        kluctl deploy -t production --yes -a environment=production -a environmentType=prod -a github_username="{{.GITHUB_USERNAME}}" -a github_pat="{{.GITHUB_PAT}}" -a docker_username="{{.DOCKER_USERNAME}}" -a docker_password="{{.DOCKER_PASSWORD}}" -a docker_email="{{.DOCKER_EMAIL}}"

  render-production-cluster:
    desc: "Render kluctl gitops production target for validation"
    vars:
      GITHUB_USERNAME: '{{.GITHUB_USERNAME | default ""}}'
      GITHUB_PAT: '{{.GITHUB_PAT | default ""}}'
      DOCKER_USERNAME: '{{.DOCKER_USERNAME | default ""}}'
      DOCKER_PASSWORD: '{{.DOCKER_PASSWORD | default ""}}'
      DOCKER_EMAIL: '{{.DOCKER_EMAIL | default ""}}'
    cmds:
      - |
        if [ -z "{{.GITHUB_USERNAME}}" ]; then
          echo "Error: GITHUB_USERNAME is required"
          echo "Usage: task render-production-cluster GITHUB_USERNAME=\$GITHUB_USERNAME GITHUB_PAT=\$GITHUB_PAT DOCKER_USERNAME=\$DOCKER_USERNAME DOCKER_PASSWORD=\$DOCKER_PASSWORD DOCKER_EMAIL=\$DOCKER_EMAIL"
          exit 1
        fi
        if [ -z "{{.GITHUB_PAT}}" ]; then
          echo "Error: GITHUB_PAT is required"
          echo "Usage: task render-production-cluster GITHUB_USERNAME=\$GITHUB_USERNAME GITHUB_PAT=\$GITHUB_PAT DOCKER_USERNAME=\$DOCKER_USERNAME DOCKER_PASSWORD=\$DOCKER_PASSWORD DOCKER_EMAIL=\$DOCKER_EMAIL"
          exit 1
        fi
        if [ -z "{{.DOCKER_USERNAME}}" ]; then
          echo "Error: DOCKER_USERNAME is required for private image access"
          echo "Usage: task render-production-cluster GITHUB_USERNAME=\$GITHUB_USERNAME GITHUB_PAT=\$GITHUB_PAT DOCKER_USERNAME=\$DOCKER_USERNAME DOCKER_PASSWORD=\$DOCKER_PASSWORD DOCKER_EMAIL=\$DOCKER_EMAIL"
          exit 1
        fi
        if [ -z "{{.DOCKER_PASSWORD}}" ]; then
          echo "Error: DOCKER_PASSWORD is required for private image access"
          echo "Usage: task render-production-cluster GITHUB_USERNAME=\$GITHUB_USERNAME GITHUB_PAT=\$GITHUB_PAT DOCKER_USERNAME=\$DOCKER_USERNAME DOCKER_PASSWORD=\$DOCKER_PASSWORD DOCKER_EMAIL=\$DOCKER_EMAIL"
          exit 1
        fi
        if [ -z "{{.DOCKER_EMAIL}}" ]; then
          echo "Error: DOCKER_EMAIL is required for private image access"
          echo "Usage: task render-production-cluster GITHUB_USERNAME=\$GITHUB_USERNAME GITHUB_PAT=\$GITHUB_PAT DOCKER_USERNAME=\$DOCKER_USERNAME DOCKER_PASSWORD=\$DOCKER_PASSWORD DOCKER_EMAIL=\$DOCKER_EMAIL"
          exit 1
        fi
        echo "Rendering production cluster with GitHub and Docker credentials..."
        echo "Using GitHub username: {{.GITHUB_USERNAME}}"
        echo "Using Docker username: {{.DOCKER_USERNAME}}"
        kluctl render -t production -a environment=production -a environmentType=prod -a github_username="{{.GITHUB_USERNAME}}" -a github_pat="{{.GITHUB_PAT}}" -a docker_username="{{.DOCKER_USERNAME}}" -a docker_password="{{.DOCKER_PASSWORD}}" -a docker_email="{{.DOCKER_EMAIL}}"

  get-cluster-status:
    desc: "Get status of all clusters"
    cmds:
      - kubectl get kluctldeployments -A
      - kubectl get pods -n kluctl-system

  get-git-credentials:
    desc: "Get the stored GitHub credentials from the secret"
    cmds:
      - echo "GitHub Username:"
      - kubectl -n kluctl-gitops get secret git-credentials -o jsonpath='{.data.username}' | base64 -d
      - echo ""
      - echo "GitHub PAT (first 10 chars):"
      - kubectl -n kluctl-gitops get secret git-credentials -o jsonpath='{.data.password}' | base64 -d | cut -c1-10
      - echo "..."

  # Troubleshooting tasks
  force-reconcile:
    desc: "Force reconciliation of all GitOps deployments"
    cmds:
      - echo "Forcing reconciliation of GitOps deployments..."
      - kubectl annotate kluctldeployment gitops reconcile.kluctl.io/requestReconcile="$(date +%s)" -n kluctl-gitops --overwrite
      - kubectl annotate kluctldeployment microadventures reconcile.kluctl.io/requestReconcile="$(date +%s)" -n kluctl-gitops --overwrite
      - echo "Reconciliation requests sent. Check status with task get-deployment-status"

  force-reconcile-microadventures:
    desc: "Force reconciliation of microadventures deployment only"
    cmds:
      - echo "Forcing reconciliation of microadventures deployment..."
      - kubectl annotate kluctldeployment microadventures reconcile.kluctl.io/requestReconcile="$(date +%s)" -n kluctl-gitops --overwrite
      - echo "Reconciliation request sent. Check status with task get-deployment-status"

  get-deployment-status:
    desc: "Get detailed status of all GitOps deployments"
    cmds:
      - echo "=== KluctlDeployment Status ==="
      - kubectl get kluctldeployments -A
      - echo ""
      - echo "=== GitOps Deployment Details ==="
      - kubectl get kluctldeployment gitops -n kluctl-gitops -o wide
      - echo ""
      - echo "=== Microadventures Deployment Details ==="
      - kubectl get kluctldeployment microadventures -n kluctl-gitops -o wide

  get-deployment-errors:
    desc: "Get last errors from GitOps deployments"
    cmds:
      - echo "=== GitOps Deployment Last Error ==="
      - kubectl get kluctldeployment gitops -n kluctl-gitops -o jsonpath='{.status.lastPrepareError}' || echo "No prepare errors"
      - echo ""
      - kubectl get kluctldeployment gitops -n kluctl-gitops -o jsonpath='{.status.lastDeployResult.error}' || echo "No deploy errors"
      - echo ""
      - echo "=== Microadventures Deployment Last Error ==="
      - kubectl get kluctldeployment microadventures -n kluctl-gitops -o jsonpath='{.status.lastPrepareError}' || echo "No prepare errors"
      - echo ""
      - kubectl get kluctldeployment microadventures -n kluctl-gitops -o jsonpath='{.status.lastDeployResult.error}' || echo "No deploy errors"
      - echo ""

  get-controller-logs:
    desc: "Get logs from kluctl controller"
    cmds:
      - echo "=== Kluctl Controller Logs (last 50 lines) ==="
      - kubectl logs -n kluctl-system -l app.kubernetes.io/name=kluctl-controller --tail=50

  restart-controller:
    desc: "Restart the kluctl controller (helps with stuck deployments)"
    cmds:
      - echo "Restarting kluctl controller..."
      - kubectl delete pods -n kluctl-system -l app.kubernetes.io/name=kluctl-controller
      - echo "Controller restart initiated. Waiting for pod to be ready..."
      - kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=kluctl-controller -n kluctl-system --timeout=60s || echo "Timeout waiting for controller, check manually"
      - echo "Controller restarted. Check status with task get-deployment-status"

  get-app-status:
    desc: "Get status of all application pods and resources"
    cmds:
      - echo "=== Application Pods Status ==="
      - kubectl get pods -n microadventures -o wide
      - echo ""
      - echo "=== Application Services ==="
      - kubectl get services -n microadventures
      - echo ""
      - echo "=== Recent Jobs (including Docker secret jobs) ==="
      - kubectl get jobs -n microadventures --sort-by=.metadata.creationTimestamp
      - echo ""
      - echo "=== Docker Registry Secret ==="
      - kubectl get secret microadventures-docker-secret -n microadventures -o jsonpath='{.metadata.creationTimestamp}' && echo " (created)"

  get-docker-secret-logs:
    desc: "Get logs from latest Docker registry secret job"
    cmds:
      - echo "=== Latest Docker Registry Secret Job Logs ==="
      - kubectl logs job/create-docker-registry-secret -n microadventures || echo "No Docker secret job found"

  get-recent-events:
    desc: "Get recent events for troubleshooting"
    cmds:
      - echo "=== Recent Events in kluctl-gitops namespace ==="
      - kubectl get events -n kluctl-gitops --sort-by=.metadata.creationTimestamp --field-selector type!=Normal | tail -20
      - echo ""
      - echo "=== Recent Events in microadventures namespace ==="
      - kubectl get events -n microadventures --sort-by=.metadata.creationTimestamp --field-selector type!=Normal | tail -20
      - echo ""
      - echo "=== Recent Events in kluctl-system namespace ==="
      - kubectl get events -n kluctl-system --sort-by=.metadata.creationTimestamp --field-selector type!=Normal | tail -20

  full-status-check:
    desc: "Comprehensive status check for troubleshooting"
    cmds:
      - task: get-deployment-status
      - echo ""
      - task: get-app-status
      - echo ""
      - task: get-deployment-errors
      - echo ""
      - echo "=== Observed Commits ==="
      - kubectl get kluctldeployment gitops -n kluctl-gitops -o jsonpath='{.status.observedCommit}' && echo " (gitops)"
      - kubectl get kluctldeployment microadventures -n kluctl-gitops -o jsonpath='{.status.observedCommit}' && echo " (microadventures)"
      - echo ""
      - echo "Run 'task get-recent-events' for error events or 'task get-controller-logs' for controller logs"