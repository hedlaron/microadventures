---
version: '3'

tasks:
  default:
    desc: "Show usage information"
    cmds:
      - |
        gum style --border {{.BORDER}} --border-foreground {{.BORDER_FOREGROUND}} --padding "{{.PADDING}}" --margin "{{.MARGIN}}" "$(cat <<EOF
        🚀 Microadventures Kluctl Tasks

        Usage: task [namespace]:[task]

        Main tasks:
        - deploy:kind          # Deploy to local Kind cluster
        - deploy:gcp           # Deploy to GCP cluster
        - status               # Check status of deployments
        - diff:kind            # Show diff for kind deployment
        - diff:gcp             # Show diff for GCP deployment

        Component tasks:
        - logs:backend         # View backend logs
        - logs:frontend        # View frontend logs
        - port-forward:backend # Port forward backend service
        - port-forward:frontend # Port forward frontend service
        - restart:backend      # Restart backend deployment
        - restart:frontend     # Restart frontend deployment

        Utility tasks:
        - validate:config      # Validate the Kluctl configuration
        - render:kind          # Render manifests for kind
        - render:gcp           # Render manifests for GCP
        
        Security tasks:
        - security:scan        # View Trivy security scan results

        Run 'task --list' to see all available tasks
        EOF
        )"

  # Deployment tasks
  deploy:kind:
    desc: "Deploy to local Kind cluster"
    cmds:
      - kluctl deploy -t kind

  deploy:gcp:
    desc: "Deploy to GCP cluster"
    cmds:
      - kluctl deploy -t gcp

  diff:kind:
    desc: "Show diff for kind deployment"
    cmds:
      - kluctl diff -t kind

  diff:gcp:
    desc: "Show diff for GCP deployment"
    cmds:
      - kluctl diff -t gcp

  render:kind:
    desc: "Render manifests for kind deployment"
    cmds:
      - kluctl render -t kind

  render:gcp:
    desc: "Render manifests for GCP deployment"
    cmds:
      - kluctl render -t gcp

  validate:config:
    desc: "Validate the Kluctl configuration"
    cmds:
      - kluctl validate

  # Status tasks
  status:
    desc: "Check status of deployments"
    cmds:
      - kubectl get ns
      - kubectl get pods -n microadventures
      - kubectl get pods -n postgres
      - kubectl get pods -n trivy-system

  # Backend tasks
  logs:backend:
    desc: "View backend logs"
    cmds:
      - kubectl logs -l app=backend -n microadventures --tail=50 -f

  describe:backend:
    desc: "Describe backend deployment"
    cmds:
      - kubectl describe deployment backend -n microadventures

  restart:backend:
    desc: "Restart the backend deployment"
    cmds:
      - kubectl rollout restart deployment/backend -n microadventures
      - kubectl rollout status deployment/backend -n microadventures

  port-forward:backend:
    desc: "Port forward backend to localhost:8000"
    cmds:
      - kubectl port-forward service/backend 8000:8000 -n microadventures

  # Frontend tasks
  logs:frontend:
    desc: "View frontend logs"
    cmds:
      - kubectl logs -l app=frontend -n microadventures --tail=50 -f

  describe:frontend:
    desc: "Describe frontend deployment"
    cmds:
      - kubectl describe deployment frontend -n microadventures

  restart:frontend:
    desc: "Restart the frontend deployment"
    cmds:
      - kubectl rollout restart deployment/frontend -n microadventures
      - kubectl rollout status deployment/frontend -n microadventures

  port-forward:frontend:
    desc: "Port forward frontend to localhost:3000"
    cmds:
      - kubectl port-forward service/frontend 3000:8080 -n microadventures

  # Database tasks
  logs:postgres:
    desc: "View postgres logs"
    cmds:
      - kubectl logs -l app=postgres-postgresql -n postgres --tail=50 -f

  port-forward:postgres:
    desc: "Port forward PostgreSQL to localhost:5432"
    cmds:
      - kubectl port-forward service/postgres-postgresql 5432:5432 -n postgres

  # Registry management
  create-image-pull-secret:
    desc: "Create image pull secret to pull from private registry"
    cmds:
      - |
        if [ -z "$DOCKER_USERNAME" ] || [ -z "$DOCKER_EMAIL" ] || [ -z "$DOCKER_PASSWORD" ]; then
          echo "Environment variables DOCKER_USERNAME, DOCKER_EMAIL, and DOCKER_PASSWORD are required."
          echo "Usage: DOCKER_USERNAME=your_username DOCKER_EMAIL=your_email DOCKER_PASSWORD=your_password task create-image-pull-secret"
          exit 1
        fi
      - |
        kubectl create secret -n microadventures docker-registry dockerconfigjson \
          --docker-email=${DOCKER_EMAIL} \
          --docker-username=${DOCKER_USERNAME} \
          --docker-password=${DOCKER_PASSWORD} \
          --docker-server=https://index.docker.io/v1/ \
          --dry-run=client -o yaml | kubectl apply -f -
        echo "Docker registry secret created successfully!"

  # Security tasks
  security:scan:
    desc: "View Trivy security scan results"
    cmds:
      - |
        gum style --border {{.BORDER}} --border-foreground {{.BORDER_FOREGROUND}} --padding "{{.PADDING}}" --margin "{{.MARGIN}}" "$(cat <<EOF
        🔐 Trivy Security Scan Results

        Vulnerability Reports:
        EOF
        )"
      - kubectl get vulnerabilityreport -A
      - |
        gum style --border {{.BORDER}} --border-foreground {{.BORDER_FOREGROUND}} --padding "{{.PADDING}}" --margin "{{.MARGIN}}" "$(cat <<EOF
        
        Configuration Audit Reports:
        EOF
        )"
      - kubectl get configauditreport -A
      - |
        gum style --border {{.BORDER}} --border-foreground {{.BORDER_FOREGROUND}} --padding "{{.PADDING}}" --margin "{{.MARGIN}}" "$(cat <<EOF
        
        RBAC Assessment Reports:
        EOF
        )"
      - kubectl get rbacassessmentreport -A
      - |
        gum style --border {{.BORDER}} --border-foreground {{.BORDER_FOREGROUND}} --padding "{{.PADDING}}" --margin "{{.MARGIN}}" "$(cat <<EOF
        
        Exposed Secrets Reports:
        EOF
        )"
      - kubectl get exposedsecretreport -A

  security:detail:
    desc: "Get detailed information about a vulnerability report"
    interactive: true
    vars:
      REPORT: 
        sh: kubectl get vulnerabilityreport -A -o custom-columns=NAMESPACE:.metadata.namespace,NAME:.metadata.name,CRITICAL:.report.summary.criticalCount,HIGH:.report.summary.highCount | tail -n +2 | gum filter | awk '{print $1 " " $2}'
    cmds:
      - |
        IFS=' ' read -r ns name <<< "{{.REPORT}}"
        kubectl get vulnerabilityreport -n $ns $name -o yaml | yq -P

  # Certificate tasks
  check-certs:
    desc: "Check certificate status"
    cmds:
      - kubectl get certificates -A
      - kubectl get certificaterequests -A
      - kubectl get challenges -A
