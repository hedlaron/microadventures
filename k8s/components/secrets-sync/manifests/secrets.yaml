apiVersion: v1
kind: ServiceAccount
metadata:
  name: secret-sync-sa
  namespace: microadventures
  annotations:
    kluctl.io/hook: pre-deploy
    kluctl.io/hook-weight: "-101"
    iam.gke.io/gcp-service-account: microadventures-secret-manager@microadventures-467613.iam.gserviceaccount.com
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: secret-sync-role
  annotations:
    kluctl.io/hook: pre-deploy
    kluctl.io/hook-weight: "-101"
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create", "update", "patch", "get", "list"]
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: secret-sync-binding
  annotations:
    kluctl.io/hook: pre-deploy
    kluctl.io/hook-weight: "-101"
subjects:
- kind: ServiceAccount
  name: secret-sync-sa
  namespace: microadventures
roleRef:
  kind: ClusterRole
  name: secret-sync-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: Job
metadata:
  name: sync-secrets-from-gcp
  namespace: microadventures
  annotations:
    kluctl.io/hook: pre-deploy
    kluctl.io/hook-weight: "-100"
    # Don't auto-delete, let Kubernetes handle job lifecycle
    # kluctl.io/hook-delete-policy: hook-failed
spec:
  template:
    spec:
      serviceAccountName: secret-sync-sa
      restartPolicy: Never
      containers:
      - name: gcp-secret-sync
        image: google/cloud-sdk:alpine
        command:
        - /bin/sh
        - -c
        - |
          # Install kubectl
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          mv kubectl /usr/local/bin/

          # Fetch secrets from GCP Secret Manager (fail if not available)
          echo "Fetching secrets from GCP Secret Manager..."

          POSTGRES_USER=$(gcloud secrets versions access latest --secret="postgresql-user" --project="microadventures-467613")
          if [ $? -ne 0 ]; then
            echo "ERROR: Failed to fetch postgresql-user from GCP Secret Manager"
            exit 1
          fi

          POSTGRES_PASSWORD=$(gcloud secrets versions access latest --secret="postgresql-password" --project="microadventures-467613")
          if [ $? -ne 0 ]; then
            echo "ERROR: Failed to fetch postgresql-password from GCP Secret Manager"
            exit 1
          fi

          JWT_SECRET=$(gcloud secrets versions access latest --secret="jwt-secret-key" --project="microadventures-467613")
          if [ $? -ne 0 ]; then
            echo "ERROR: Failed to fetch jwt-secret-key from GCP Secret Manager"
            exit 1
          fi

          OPENAI_KEY=$(gcloud secrets versions access latest --secret="openai-api-key" --project="microadventures-467613")
          if [ $? -ne 0 ]; then
            echo "ERROR: Failed to fetch openai-api-key from GCP Secret Manager"
            exit 1
          fi

          echo "Successfully fetched all secrets from GCP Secret Manager"

          # Create secrets for microadventures namespace
          kubectl create secret generic microadventures-gcp-secrets \
            --from-literal=POSTGRES_USER="$POSTGRES_USER" \
            --from-literal=POSTGRES_PASSWORD="$POSTGRES_PASSWORD" \
            --from-literal=JWT_SECRET_KEY="$JWT_SECRET" \
            --from-literal=OPENAI_API_KEY="$OPENAI_KEY" \
            --namespace=microadventures \
            --dry-run=client -o yaml | kubectl apply -f -

          # Create secrets for postgres namespace
          kubectl create secret generic microadventures-gcp-secrets \
            --from-literal=postgresql-password="$POSTGRES_PASSWORD" \
            --from-literal=POSTGRES_USER="$POSTGRES_USER" \
            --from-literal=POSTGRES_PASSWORD="$POSTGRES_PASSWORD" \
            --namespace=postgres \
            --dry-run=client -o yaml | kubectl apply -f -

          echo "Secrets synced from GCP Secret Manager"
