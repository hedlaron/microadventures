---
version: '3'

tasks:
  default:
    desc: "Show usage information"
    cmds:
      - |
        cat << EOF
        🚀 Microadventures Kluctl Deployment

        📦 Helm Charts Management:
        - helm-pull            # Pull all Helm charts (automatically runs before deployments)

        🏗️  Main deployment tasks:
        - deploy:local         # Deploy to local Kind cluster
        - deploy:production    # Deploy to GCP production cluster
        - diff:local           # Show diff for local deployment
        - diff:production      # Show diff for production deployment
        - render:local         # Render manifests for local deployment
        - render:production    # Render manifests for production deployment

        🔧 Utility tasks:
        - validate:config      # Validate the Kluctl configuration
        - status               # Check status of deployments
        
        📊 Component tasks:
        - logs:backend         # View backend logs
        - logs:frontend        # View frontend logs
        - logs:postgres        # View postgres logs
        - restart:backend      # Restart backend deployment
        - restart:frontend     # Restart frontend deployment

        🔒 Security tasks:
        - security:scan        # View Trivy security scan results

        💡 Usage Examples:
        - task deploy:local           # Deploy to local Kind
        - task deploy:production      # Deploy to GCP
        - task logs:backend           # View backend logs
        
        Run 'task --list' to see all available tasks
        EOF

  # Helm charts management
  helm-pull:
    desc: "Pull all Helm charts used by kluctl"
    cmds:
      - echo "🔄 Pulling Helm charts..."
      - kluctl helm-pull

  # Deployment tasks
  deploy:local:
    desc: "Deploy to local Kind cluster"
    deps: [helm-pull]
    cmds:
      - echo "🚀 Deploying to local Kind environment..."
      - kluctl deploy -t local

  deploy:production:
    desc: "Deploy to GCP production cluster"
    deps: [helm-pull]
    cmds:
      - echo "🚀 Deploying to production GCP environment..."
      - kluctl deploy -t production

  # Diff tasks
  diff:local:
    desc: "Show diff for local deployment"
    deps: [helm-pull]
    cmds:
      - kluctl diff -t local

  diff:production:
    desc: "Show diff for production deployment"
    deps: [helm-pull]
    cmds:
      - kluctl diff -t production

  # Render tasks
  render:local:
    desc: "Render manifests for local deployment"
    deps: [helm-pull]
    cmds:
      - kluctl render -t local

  render:production:
    desc: "Render manifests for production deployment"
    deps: [helm-pull]
    cmds:
      - kluctl render -t production

  validate:config:local:
    desc: "Validate the Kluctl configuration"
    cmds:
      - kluctl validate -t local

  validate:config:production:
    desc: "Validate the Kluctl configuration"
    cmds:
      - kluctl validate -t production

  # Status tasks
  status:
    desc: "Check status of deployments"
    cmds:
      - kubectl get ns
      - kubectl get pods -n microadventures
      - kubectl get pods -n postgres
      - kubectl get pods -n trivy-system

  # Component tasks
  logs:backend:
    desc: "View backend logs"
    cmds:
      - kubectl logs -l app=backend -n microadventures --tail=50 -f

  logs:frontend:
    desc: "View frontend logs"
    cmds:
      - kubectl logs -l app=frontend -n microadventures --tail=50 -f

  logs:postgres:
    desc: "View postgres logs"
    cmds:
      - kubectl logs -l app=postgres-postgresql -n postgres --tail=50 -f

  restart:backend:
    desc: "Restart the backend deployment"
    cmds:
      - kubectl rollout restart deployment/backend -n microadventures
      - kubectl rollout status deployment/backend -n microadventures

  restart:frontend:
    desc: "Restart the frontend deployment"
    cmds:
      - kubectl rollout restart deployment/frontend -n microadventures
      - kubectl rollout status deployment/frontend -n microadventures

  # Security tasks
  security:scan:
    desc: "View Trivy security scan results"
    cmds:
      - echo "🔐 Trivy Security Scan Results"
      - echo "Vulnerability Reports:"
      - kubectl get vulnerabilityreport -A
      - echo ""
      - echo "Configuration Audit Reports:"
      - kubectl get configauditreport -A
      - echo ""
      - echo "RBAC Assessment Reports:"
      - kubectl get rbacassessmentreport -A
      - echo ""
      - echo "Exposed Secrets Reports:"
      - kubectl get exposedsecretreport -A
