version: "3"

env:
  # Set default gum style options
  BORDER: double
  BORDER_FOREGROUND: "212"
  PADDING: "1 1"
  MARGIN: "1 1"

includes:
  common:
    taskfile: ./common/Taskfile.yaml
    dir: ./common
  postgresql:
    taskfile: ./postgresql/Taskfile.yaml
    dir: ./postgresql
  backend:
    taskfile: ./backend/Taskfile.yaml
    dir: ./backend
  frontend:
    taskfile: ./frontend/Taskfile.yaml
    dir: ./frontend
  kind:
    taskfile: ./kind/Taskfile.yaml
    dir: ./kind
  gke:
    taskfile: ./gke/Taskfile.yaml
    dir: ./gke
  trivy-operator:
    taskfile: ./trivy-operator/Taskfile.yaml
    dir: ./trivy-operator

tasks:
  default:
    desc: "Show usage information"
    cmds:
      - |
        gum style --border {{.BORDER}} --border-foreground {{.BORDER_FOREGROUND}} --padding "{{.PADDING}}" --margin "{{.MARGIN}}" "$(cat <<EOF
        ðŸš€ Microadventures Kubernetes Tasks

        Usage: task [namespace]:[task]

        Main namespaces:
        - common: Common setup tasks for all environments
        - kind: Tasks specific to local Kind cluster
        - gke: Tasks specific to Google Kubernetes Engine

        Component namespaces:
        - backend: Backend application tasks
        - frontend: Frontend application tasks
        - postgresql: Database tasks
        
        Examples:
        - task kind:setup           # Set up HTTPS for local Kind cluster
        - task gke:setup            # Set up HTTPS for GKE production
        - task backend:deploy       # Deploy the backend component
        - task common:check-certs   # Check certificate status

        Run 'task --list-all' to see all available tasks
        EOF
        )"

  # Legacy frontend task (now use frontend:deploy from frontend/Taskfile.yaml)

  # Registry management
  registry:create-image-pull-secret:
    desc: "Create image pull secret to pull from private registry"
    cmds:
      - |
        if [ -z "$DOCKER_USERNAME" ] || [ -z "$DOCKER_EMAIL" ] || [ -z "$DOCKER_PASSWORD" ]; then
          echo "Environment variables DOCKER_USERNAME, DOCKER_EMAIL, and DOCKER_PASSWORD are required."
          echo "Usage: DOCKER_USERNAME=your_username DOCKER_EMAIL=your_email DOCKER_PASSWORD=your_password task registry:create-image-pull-secret"
          exit 1
        fi
      - |
        kubectl create secret -n microadventures docker-registry dockerconfigjson \
          --docker-email=${DOCKER_EMAIL} \
          --docker-username=${DOCKER_USERNAME} \
          --docker-password=${DOCKER_PASSWORD} \
          --docker-server=https://index.docker.io/v1/
        echo "Docker registry secret created successfully!"

  # Complete cluster setup tasks
  kind:apply-all:
    desc: "Apply all resources for local Kind cluster"
    cmds:
      - kubectx kind-kind || echo "No Kind context found, continuing anyway..."
      - task: common:namespace
      - task: postgresql:install-postgres
      - task: postgresql:apply-initial-db-migration-job
      - task: postgresql:reapply-db-migration-job
      - task: common:deploy-traefik
      - task: common:middleware
      - task: common:deploy-cert-manager
      - task: common:apply
      - task: kind:apply
      - task: backend:deploy
      - task: frontend:deploy
      - |
        gum style "$(cat <<EOF
        ðŸŽ‰ Kind cluster setup complete!
        
        Access your application:
        - Frontend: https://localhost:8443 (accept self-signed certificate)
        - Backend API: https://localhost:8443/api/
        
        You can check the status with:
        - task kind:status
        EOF
        )"

  kind:status:
    desc: "Check status of Kind cluster resources"
    cmds:
      - task: common:status
      - task: backend:status
      - kubectl get pods -n microadventures
      - kubectl get pods -n postgres

  gke:apply-all:
    desc: "Apply all resources for GKE cluster"
    cmds:
      - task: common:namespace
      - task: postgresql:install-postgres
      - task: postgresql:apply-initial-db-migration-job
      - task: common:deploy-traefik
      - task: common:deploy-cert-manager
      - task: common:apply
      - task: gke:apply
      - task: backend:deploy
      - task: frontend:deploy
      - |
        gum style "$(cat <<EOF
        ðŸŽ‰ GKE cluster setup complete!
        
        Access your application at your configured domain.
        Note: Let's Encrypt certificate issuance may take a few minutes.
        
        You might need to create an image pull secret:
        DOCKER_USERNAME=your_username DOCKER_EMAIL=your_email DOCKER_PASSWORD=your_password task registry:create-image-pull-secret
        
        You can check the status with:
        - task gke:status
        - task common:check-certs
        EOF
        )"

  gke:status:
    desc: "Check status of GKE cluster resources"
    cmds:
      - task: common:status
      - task: backend:status
      - kubectl get pods -n microadventures
      - kubectl get pods -n postgres
      - task: common:check-certs

