---
version: '3'

tasks:
  default:
    desc: Show usage information
    cmds:
      - echo "üöÄ Microadventures Kluctl Tasks"
      - echo ""
      - echo "Usage: task [command]"
      - echo ""
      - echo "Deployment Commands:"
      - echo "  deploy:kind     - Deploy to local Kind cluster"
      - echo "  deploy:gcp      - Deploy to GCP cluster"
      - echo "  diff:kind       - Show diff for kind deployment"
      - echo "  diff:gcp        - Show diff for GCP deployment"
      - echo ""
      - echo "Utility Commands:"
      - echo "  logs:backend    - View backend logs"
      - echo "  logs:frontend   - View frontend logs"
      - echo "  port-backend    - Port forward backend to localhost:8000"
      - echo "  port-frontend   - Port forward frontend to localhost:3000"
      - echo "  security:scan   - View Trivy security scan results"

  deploy:kind:
    desc: Deploy to local Kind cluster
    cmds:
      - kluctl deploy -t kind

  deploy:gcp:
    desc: Deploy to GCP cluster
    cmds:
      - kluctl deploy -t gcp

  diff:kind:
    desc: Show diff for kind deployment
    cmds:
      - kluctl diff -t kind

  diff:gcp:
    desc: Show diff for GCP deployment
    cmds:
      - kluctl diff -t gcp

  render:kind:
    desc: Render manifests for kind deployment
    cmds:
      - kluctl render -t kind

  render:gcp:
    desc: Render manifests for GCP deployment
    cmds:
      - kluctl render -t gcp

  validate:
    desc: Validate the Kluctl configuration
    cmds:
      - kluctl validate

  status:
    desc: Check status of deployments
    cmds:
      - kubectl get ns
      - kubectl get pods -n microadventures
      - kubectl get pods -n postgres
      - kubectl get pods -n trivy-system

  logs:backend:
    desc: View backend logs
    cmds:
      - kubectl logs -l app=backend -n microadventures --tail=50 -f

  describe:backend:
    desc: Describe backend deployment
    cmds:
      - kubectl describe deployment backend -n microadventures

  restart:backend:
    desc: Restart the backend deployment
    cmds:
      - kubectl rollout restart deployment/backend -n microadventures
      - kubectl rollout status deployment/backend -n microadventures

  port-backend:
    desc: Port forward backend to localhost:8000
    cmds:
      - kubectl port-forward service/backend 8000:8000 -n microadventures

  logs:frontend:
    desc: View frontend logs
    cmds:
      - kubectl logs -l app=frontend -n microadventures --tail=50 -f

  describe:frontend:
    desc: Describe frontend deployment
    cmds:
      - kubectl describe deployment frontend -n microadventures

  restart:frontend:
    desc: Restart the frontend deployment
    cmds:
      - kubectl rollout restart deployment/frontend -n microadventures
      - kubectl rollout status deployment/frontend -n microadventures

  port-frontend:
    desc: Port forward frontend to localhost:3000
    cmds:
      - kubectl port-forward service/frontend 3000:8080 -n microadventures

  logs:postgres:
    desc: View postgres logs
    cmds:
      - kubectl logs -l app=postgres-postgresql -n postgres --tail=50 -f

  port-postgres:
    desc: Port forward PostgreSQL to localhost:5432
    cmds:
      - kubectl port-forward service/postgres-postgresql 5432:5432 -n postgres

  create-pull-secret:
    desc: Create image pull secret to pull from private registry
    cmds:
      - |
        if [ -z "$DOCKER_USERNAME" ] || [ -z "$DOCKER_EMAIL" ] || [ -z "$DOCKER_PASSWORD" ]; then
          echo "Environment variables DOCKER_USERNAME, DOCKER_EMAIL, and DOCKER_PASSWORD are required."
          echo "Usage: DOCKER_USERNAME=your_username DOCKER_EMAIL=your_email DOCKER_PASSWORD=your_password task create-pull-secret"
          exit 1
        fi
      - |
        kubectl create secret -n microadventures docker-registry dockerconfigjson \
          --docker-email=${DOCKER_EMAIL} \
          --docker-username=${DOCKER_USERNAME} \
          --docker-password=${DOCKER_PASSWORD} \
          --docker-server=https://index.docker.io/v1/ \
          --dry-run=client -o yaml | kubectl apply -f -
        echo "Docker registry secret created successfully!"

  security:scan:
    desc: View Trivy security scan results
    cmds:
      - echo "üîê Trivy Security Scan Results"
      - echo ""
      - echo "Vulnerability Reports:"
      - kubectl get vulnerabilityreport -A
      - echo ""
      - echo "Configuration Audit Reports:"
      - kubectl get configauditreport -A
      - echo ""
      - echo "RBAC Assessment Reports:"
      - kubectl get rbacassessmentreport -A
      - echo ""
      - echo "Exposed Secrets Reports:"
      - kubectl get exposedsecretreport -A

  check-certs:
    desc: Check certificate status
    cmds:
      - kubectl get certificates -A
      - kubectl get certificaterequests -A
      - kubectl get challenges -A
