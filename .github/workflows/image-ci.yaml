name: image-ci

on:
  push:
    branches:
      - "master"
    tags:
      - "[0-9]*.[0-9]*.[0-9]*"
    paths:
      # Only rebuild images when applications change
      - "components/**/*"
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Custom image tag (optional, will auto-generate if not provided)'
        required: false
        type: string
      component:
        description: 'Component to build'
        required: false
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'backend'
          - 'frontend'

jobs:
  generate-image-tag:
    # initial tag created manually --> git tag -a v0.0.1 -m "Initial tag"
    # --> git push origin --tags
    # subsequent tags created automatically by this workflow
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      image_tag: ${{ steps.generate-image-tag.outputs.image_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # Necessary to get all tags for IMAGE_TAG generation with git describe
          fetch-depth: 0

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: 3.x

      - name: Generate Image Tag
        id: generate-image-tag
        working-directory: cicd/github-actions
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.image_tag }}" ]]; then
            image_tag="${{ github.event.inputs.image_tag }}"
          else
            image_tag=$(task generate-version-tag)
          fi
          echo "image_tag=$image_tag" >> $GITHUB_OUTPUT

  determine-components:
    runs-on: ubuntu-latest
    outputs:
      components: ${{ steps.filter.outputs.components }}
    steps:
      - name: Determine components to build
        id: filter
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            component="${{ github.event.inputs.component }}"
            if [[ "$component" == "all" ]]; then
              echo 'components=["components/backend", "components/frontend"]' >> $GITHUB_OUTPUT
            elif [[ "$component" == "backend" ]]; then
              echo 'components=["components/backend"]' >> $GITHUB_OUTPUT
            elif [[ "$component" == "frontend" ]]; then
              echo 'components=["components/frontend"]' >> $GITHUB_OUTPUT
            fi
          else
            # For push events, build all components
            echo 'components=["components/backend", "components/frontend"]' >> $GITHUB_OUTPUT
          fi

  build-tag-push:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [generate-image-tag, determine-components]
    strategy:
      fail-fast: false
      matrix:
        path: ${{ fromJson(needs.determine-components.outputs.components) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: 3.x


      - name: Run tests in container
        working-directory: ${{ matrix.path }}
        env:
          IMAGE_TAG: ${{ needs.generate-image-tag.outputs.image_tag }}
        run: |
          echo "Running tests in Docker container for ${{ matrix.path }}"

          # Debug: Show system resources
          echo "=== SYSTEM RESOURCES ==="
          free -h
          df -h
          echo "Docker system info:"
          docker system df
          echo "========================="

          # Clean up Docker to free memory
          echo "Cleaning up Docker system..."
          docker system prune -af --volumes || true
          echo "After cleanup:"
          docker system df

          COMPONENT=""
          if [[ "${{ matrix.path }}" == "components/backend" ]]; then
            COMPONENT="backend"
            echo "Building and testing backend in container..."
            docker buildx build \
              --platform linux/amd64 \
              --target test \
              --build-arg APP_VERSION=${IMAGE_TAG} \
              --build-arg RUN_TESTS=true \
              --memory=1536m \
              --memory-swap=2g \
              -t hedlaron/microadventures-backend:${IMAGE_TAG}-test \
              --load \
              .
          elif [[ "${{ matrix.path }}" == "components/frontend" ]]; then
            COMPONENT="frontend"
            echo "Building and testing frontend in container..."
            docker buildx build \
              --platform linux/amd64 \
              --target test \
              --build-arg APP_VERSION=${IMAGE_TAG} \
              --build-arg RUN_TESTS=true \
              --memory=1536m \
              --memory-swap=2g \
              -t hedlaron/microadventures-frontend:${IMAGE_TAG}-test \
              --load \
              .
          fi

      - name: Test, Coverage, and Security Summary
        uses: ./.github/actions/test-and-report
        env:
          JWT_SECRET_KEY: dummy_jwt
          POSTGRESQL_USERNAME: dummy_user
          POSTGRESQL_PASSWORD: dummy_pass
          POSTGRESQL_SERVER: dummy_host
          POSTGRESQL_PORT: 5432
          POSTGRESQL_DATABASE: dummy_db
          OPENAI_API_KEY: dummy_openai
        with:
          component: ${{ matrix.path == 'components/backend' && 'backend' || 'frontend' }}
          image_tag: ${{ needs.generate-image-tag.outputs.image_tag }}

      - name: Post combined summary
        if: always()
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Component**: ${{ matrix.path }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Tag**: ${{ needs.generate-image-tag.outputs.image_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Platform**: linux/amd64" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          # Append the detailed test, coverage, and security summary if present
          if [ -f trivy-image-scan.txt ]; then
            echo '## 🛡️ Container Image Security Scan' >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat trivy-image-scan.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
          if [ -f $GITHUB_WORKSPACE/test-summary.txt ]; then
            cat $GITHUB_WORKSPACE/test-summary.txt >> $GITHUB_STEP_SUMMARY
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push production image
        env:
          IMAGE_TAG: ${{ needs.generate-image-tag.outputs.image_tag }}
        working-directory: ${{ matrix.path }}
        run: |
          echo "Building production image for ${{ matrix.path }} with tag ${IMAGE_TAG}"
          task build-container-image-multi-arch IMAGE_TAG=${IMAGE_TAG}

  update-tags:
    runs-on: ubuntu-latest
    needs: [generate-image-tag, build-tag-push]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: 3.x

      - name: Update Image Tags
        working-directory: cicd/github-actions
        env:
          IMAGE_TAG: ${{ needs.generate-image-tag.outputs.image_tag }}
        run: |
          # Update staging tags for push to master or release tag
          task update-staging-image-tags NEW_TAG=${IMAGE_TAG}

          # Update production tags for push to master or release tag
          task update-production-image-tags NEW_TAG=${IMAGE_TAG}

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          base: master
          token: ${{ secrets.MICROADVENTURES_GHA_PAT }}
          title: "Update image tags to (${{ needs.generate-image-tag.outputs.image_tag }})"
