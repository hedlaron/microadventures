name: 'Test and Report'
description: 'Run tests in Docker and summarize results for GitHub Actions summary.'
inputs:
  component:
    description: 'Component to test (backend or frontend)'
    required: true
  image_tag:
    description: 'Docker image tag to use'
    required: true
runs:
  using: 'composite'
  steps:
    - name: Set TruffleHog Args
      id: trufflehog-args
      shell: bash
      run: |
        # No ignore patterns
        IGNORE_ARGS="--debug"
        # Detect event type
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          echo "mode=pr" >> $GITHUB_OUTPUT
          echo "extra_args=$IGNORE_ARGS" >> $GITHUB_OUTPUT
        else
          echo "mode=push" >> $GITHUB_OUTPUT
          echo "extra_args=$IGNORE_ARGS" >> $GITHUB_OUTPUT
        fi
    - name: Check TruffleHog PR scan eligibility
      if: github.event_name == 'pull_request'
      shell: bash
      run: |
        base_commit="${{ github.event.pull_request.base.sha }}"
        head_commit="${{ github.event.pull_request.head.sha }}"
        if [ -z "$base_commit" ] || [ -z "$head_commit" ]; then
          echo "[WARNING] BASE or HEAD commit is missing. Skipping TruffleHog scan."
          exit 0
        fi
        if [ "$base_commit" == "$head_commit" ]; then
          echo "[WARNING] BASE and HEAD are identical. No new commits to scan. Skipping TruffleHog scan."
          exit 0
        fi
    - name: TruffleHog OSS (PR)
      if: github.event_name == 'pull_request' && github.event.pull_request.base.sha != github.event.pull_request.head.sha
      id: trufflehog_pr
      uses: trufflesecurity/trufflehog@main
      continue-on-error: true
      with:
        path: ./
        base: "${{ github.event.pull_request.base.sha }}"
        head: "${{ github.event.pull_request.head.sha }}"
        extra_args: ${{ steps.trufflehog-args.outputs.extra_args }}
    - name: TruffleHog OSS (Push)
      if: github.event_name != 'pull_request'
      id: trufflehog_push
      uses: trufflesecurity/trufflehog@main
      continue-on-error: true
      with:
        path: ./
        extra_args: ${{ steps.trufflehog-args.outputs.extra_args }}
    - name: Scan Results Status
      if: (steps.trufflehog_pr.outcome == 'failure') || (steps.trufflehog_push.outcome == 'failure')
      shell: bash
      run: exit 1
    - name: Trivy image security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ inputs.component == 'backend' && format('hedlaron/microadventures-backend:{0}-test', inputs.image_tag) || format('hedlaron/microadventures-frontend:{0}-test', inputs.image_tag) }}
        format: 'table'
        exit-code: '0'
        severity: 'HIGH,CRITICAL'
        ignore-unfixed: true
    - name: Run tests and summarize
      shell: bash
      run: |
        set -x
        COMPONENT="${{ inputs.component }}"
        IMAGE_TAG="${{ inputs.image_tag }}"
        echo "[DEBUG] COMPONENT: $COMPONENT"
        echo "[DEBUG] IMAGE_TAG: $IMAGE_TAG"
        if [[ "$COMPONENT" == "backend" ]]; then
          echo "‚úÖ Backend Docker build completed successfully" >> $GITHUB_WORKSPACE/test-summary.txt
          echo "## üß™ Backend Test Results" >> $GITHUB_WORKSPACE/test-summary.txt
          echo '' >> $GITHUB_WORKSPACE/test-summary.txt
          echo "[DEBUG] Running backend tests..."
          BACKEND_TEST_OUTPUT=$(docker run --rm \
            -e JWT_SECRET_KEY="$JWT_SECRET_KEY" \
            -e POSTGRESQL_USERNAME="$POSTGRESQL_USERNAME" \
            -e POSTGRESQL_PASSWORD="$POSTGRESQL_PASSWORD" \
            -e POSTGRESQL_SERVER="$POSTGRESQL_SERVER" \
            -e POSTGRESQL_PORT="$POSTGRESQL_PORT" \
            -e POSTGRESQL_DATABASE="$POSTGRESQL_DATABASE" \
            -e OPENAI_API_KEY="$OPENAI_API_KEY" \
            hedlaron/microadventures-backend:${IMAGE_TAG}-test \
            uv run pytest --cov=. --cov-report=term-missing --maxfail=1 --tb=short 2>&1)
          echo "[DEBUG] Backend test output captured."
          # Extract test summary line (e.g. '=== 12 passed, 1 warning in 0.12s ===')
          BACKEND_TEST_SUMMARY=$(echo "$BACKEND_TEST_OUTPUT" | grep -E '^=+ .+ in .+s =+$' | tail -1)
          # Extract coverage percent (e.g. 'TOTAL ... 95%')
          BACKEND_COV_LINE=$(echo "$BACKEND_TEST_OUTPUT" | grep -E '^TOTAL' | tail -1)
          BACKEND_COV_PCT=$(echo "$BACKEND_COV_LINE" | grep -oE '[0-9]+\.?[0-9]*%')
          echo "**Backend Test Summary:** $BACKEND_TEST_SUMMARY" >> $GITHUB_WORKSPACE/test-summary.txt
          if [ -n "$BACKEND_COV_PCT" ]; then
            echo "**Backend Coverage:** $BACKEND_COV_PCT" >> $GITHUB_WORKSPACE/test-summary.txt
          fi
          if echo "$BACKEND_TEST_OUTPUT" | grep -q 'ValidationError'; then
            echo '[DEBUG] Backend ValidationError detected.'
            echo '<details open><summary><span style="color:red;font-weight:bold;">‚ùå Backend Environment Error (click to expand)</span></summary>' >> $GITHUB_WORKSPACE/test-summary.txt
            echo '' >> $GITHUB_WORKSPACE/test-summary.txt
            echo '```' >> $GITHUB_WORKSPACE/test-summary.txt
            echo "$BACKEND_TEST_OUTPUT" >> $GITHUB_WORKSPACE/test-summary.txt
            echo '```' >> $GITHUB_WORKSPACE/test-summary.txt
            echo '<br><b>‚ùóÔ∏è Environment variables missing for backend tests. See error details above.</b>' >> $GITHUB_WORKSPACE/test-summary.txt
            echo '</details>' >> $GITHUB_WORKSPACE/test-summary.txt
          else
            echo '[DEBUG] Backend tests passed or no ValidationError.'
            echo '<details open><summary><span style="color:green;font-weight:bold;">‚úÖ Backend Tests Passed (click to expand)</span></summary>' >> $GITHUB_WORKSPACE/test-summary.txt
            echo '' >> $GITHUB_WORKSPACE/test-summary.txt
            echo '```' >> $GITHUB_WORKSPACE/test-summary.txt
            echo "$BACKEND_TEST_OUTPUT" >> $GITHUB_WORKSPACE/test-summary.txt
            echo '```' >> $GITHUB_WORKSPACE/test-summary.txt
            echo '</details>' >> $GITHUB_WORKSPACE/test-summary.txt
          fi
          echo '' >> $GITHUB_WORKSPACE/test-summary.txt
          echo "### Backend Coverage Summary" >> $GITHUB_WORKSPACE/test-summary.txt
          echo "[DEBUG] Getting backend HTML coverage..."
          BACKEND_COV=$(docker run --rm hedlaron/microadventures-backend:${IMAGE_TAG}-test cat /app/htmlcov/index.html 2>/dev/null | grep -A 10 '<h2>Coverage summary' | head -n 12)
          if [ -z "$BACKEND_COV" ]; then
            echo '<span style="color:orange;">‚ö†Ô∏è No backend HTML coverage report found. This is not fatal if coverage is shown above.</span>' >> $GITHUB_WORKSPACE/test-summary.txt
          else
            echo '```html' >> $GITHUB_WORKSPACE/test-summary.txt
            echo "$BACKEND_COV" >> $GITHUB_WORKSPACE/test-summary.txt
            echo '```' >> $GITHUB_WORKSPACE/test-summary.txt
          fi
        elif [[ "$COMPONENT" == "frontend" ]]; then
          set +e
          echo "‚úÖ Frontend Docker build completed successfully" >> $GITHUB_WORKSPACE/test-summary.txt
          echo "## üé® Frontend Test Results" >> $GITHUB_WORKSPACE/test-summary.txt
          echo '' >> $GITHUB_WORKSPACE/test-summary.txt
          echo "[DEBUG] Running frontend tests..."
          FRONTEND_TEST_OUTPUT=$(docker run --rm hedlaron/microadventures-frontend:${IMAGE_TAG}-test npm run test:coverage 2>&1)
          echo "[DEBUG] Frontend test output captured."
          # Extract test summary line (e.g. 'Test Files  3 passed | 0 failed')
          FRONTEND_TEST_SUMMARY=$(echo "$FRONTEND_TEST_OUTPUT" | grep -E 'Test Files|Tests:|Suites:|Snapshots:|Time:')
          # Extract coverage percent (e.g. 'Statements   : 95.00%')
          FRONTEND_COV_PCT=$(echo "$FRONTEND_TEST_OUTPUT" | grep -E 'Statements\s*:' | grep -oE '[0-9]+\.?[0-9]*%')
          if [ -z "$FRONTEND_COV_PCT" ]; then
            # Try to extract from summary table if not found in Statements line
            FRONTEND_COV_PCT=$(echo "$FRONTEND_TEST_OUTPUT" | grep -Eo '[0-9]+\.[0-9]+%' | head -1)
          fi
          echo "**Frontend Test Summary:**" >> $GITHUB_WORKSPACE/test-summary.txt
          echo '```' >> $GITHUB_WORKSPACE/test-summary.txt
          echo "$FRONTEND_TEST_SUMMARY" >> $GITHUB_WORKSPACE/test-summary.txt
          echo '```' >> $GITHUB_WORKSPACE/test-summary.txt
          if [ -n "$FRONTEND_COV_PCT" ]; then
            echo "**Frontend Coverage:** $FRONTEND_COV_PCT" >> $GITHUB_WORKSPACE/test-summary.txt
          else
            echo '<span style="color:orange;">‚ö†Ô∏è No frontend coverage percent found in test output.</span>' >> $GITHUB_WORKSPACE/test-summary.txt
          fi
          if echo "$FRONTEND_TEST_OUTPUT" | grep -q 'FAIL'; then
            echo '[DEBUG] Frontend test failure detected.'
            echo '<details><summary><span style="color:red;font-weight:bold;">‚ùå Frontend Tests Failed (click to expand)</span></summary>' >> $GITHUB_WORKSPACE/test-summary.txt
            echo '' >> $GITHUB_WORKSPACE/test-summary.txt
            echo '```' >> $GITHUB_WORKSPACE/test-summary.txt
            echo "$FRONTEND_TEST_OUTPUT" >> $GITHUB_WORKSPACE/test-summary.txt
            echo '```' >> $GITHUB_WORKSPACE/test-summary.txt
            echo '</details>' >> $GITHUB_WORKSPACE/test-summary.txt
          elif echo "$FRONTEND_TEST_OUTPUT" | grep -q 'No tests found'; then
            echo '[DEBUG] No frontend tests found.'
            echo '<span style="color:orange;">‚ö†Ô∏è No frontend tests found or executed.</span>' >> $GITHUB_WORKSPACE/test-summary.txt
          else
            echo '[DEBUG] Frontend tests passed.'
            echo '<details open><summary><span style="color:green;font-weight:bold;">‚úÖ Frontend Tests Passed (click to expand)</span></summary>' >> $GITHUB_WORKSPACE/test-summary.txt
            echo '' >> $GITHUB_WORKSPACE/test-summary.txt
            echo '```' >> $GITHUB_WORKSPACE/test-summary.txt
            echo "$FRONTEND_TEST_OUTPUT" >> $GITHUB_WORKSPACE/test-summary.txt
            echo '```' >> $GITHUB_WORKSPACE/test-summary.txt
            echo '</details>' >> $GITHUB_WORKSPACE/test-summary.txt
          fi
          echo '' >> $GITHUB_WORKSPACE/test-summary.txt
          echo "### Frontend Coverage Summary" >> $GITHUB_WORKSPACE/test-summary.txt
          echo "[DEBUG] Getting frontend JSON coverage..."
          FRONTEND_COV=$(docker run --rm hedlaron/microadventures-frontend:${IMAGE_TAG}-test cat /usr/src/app/coverage/coverage-summary.json 2>/dev/null)
          if [ -z "$FRONTEND_COV" ]; then
            echo '<span style="color:orange;">‚ö†Ô∏è No frontend coverage report found.</span>' >> $GITHUB_WORKSPACE/test-summary.txt
          else
            echo '```json' >> $GITHUB_WORKSPACE/test-summary.txt
            echo "$FRONTEND_COV" >> $GITHUB_WORKSPACE/test-summary.txt
            echo '```' >> $GITHUB_WORKSPACE/test-summary.txt
          fi
          set -e
        fi
