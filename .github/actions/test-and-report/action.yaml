name: 'Test and Report'
description: 'Run tests in Docker and summarize results for GitHub Actions summary.'
inputs:
  component:
    description: 'Component to test (backend or frontend)'
    required: true
  image_tag:
    description: 'Docker image tag to use'
    required: true
runs:
  using: 'composite'
  steps:


    - name: Trufflehog secret scan
      shell: bash
      run: |
        echo '::group::Running trufflehog scan'
        trufflehog filesystem --no-update --fail .
        echo '::endgroup::'

    - name: Trivy image security scan
      shell: bash
      run: |
        echo '::group::Running Trivy image scan'
        if [[ "${{ inputs.component }}" == "backend" ]]; then
          IMAGE="hedlaron/microadventures-backend:${{ inputs.image_tag }}-test"
        else
          IMAGE="hedlaron/microadventures-frontend:${{ inputs.image_tag }}-test"
        fi
        trivy image --no-progress --format table "$IMAGE" | tee trivy-image-scan.txt
        echo '## üõ°Ô∏è Container Image Security Scan' >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        cat trivy-image-scan.txt >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo '::endgroup::'

    - name: Security scan image with Trivy
      shell: bash
      run: |
        echo "::group::Running Trivy image scan"
        if [[ "${{ inputs.component }}" == "backend" ]]; then
          IMAGE="hedlaron/microadventures-backend:${{ inputs.image_tag }}-test"
        else
          IMAGE="hedlaron/microadventures-frontend:${{ inputs.image_tag }}-test"
        fi
        trivy image --no-progress --format table "$IMAGE" | tee trivy-image-scan.txt
        echo '## üõ°Ô∏è Container Image Security Scan' >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        cat trivy-image-scan.txt >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "::endgroup::"

    - name: Run tests and summarize
      shell: bash
      run: |
        COMPONENT="${{ inputs.component }}"
        IMAGE_TAG="${{ inputs.image_tag }}"
        if [[ "$COMPONENT" == "backend" ]]; then
          echo "‚úÖ Backend Docker build completed successfully"
          echo "## üß™ Backend Test Results" >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY
          BACKEND_TEST_OUTPUT=$(docker run --rm hedlaron/microadventures-backend:${IMAGE_TAG}-test uv run pytest --cov=. --cov-report=term-missing --maxfail=1 --tb=short 2>&1)
          # Extract test summary line (e.g. '=== 12 passed, 1 warning in 0.12s ===')
          BACKEND_TEST_SUMMARY=$(echo "$BACKEND_TEST_OUTPUT" | grep -E '^=+ .+ in .+s =+$' | tail -1)
          # Extract coverage percent (e.g. 'TOTAL ... 95%')
          BACKEND_COV_LINE=$(echo "$BACKEND_TEST_OUTPUT" | grep -E '^TOTAL' | tail -1)
          BACKEND_COV_PCT=$(echo "$BACKEND_COV_LINE" | awk '{print $NF}')
          echo "**Backend Test Summary:** $BACKEND_TEST_SUMMARY" >> $GITHUB_STEP_SUMMARY
          if [ -n "$BACKEND_COV_PCT" ]; then
            echo "**Backend Coverage:** $BACKEND_COV_PCT" >> $GITHUB_STEP_SUMMARY
          fi
          if echo "$BACKEND_TEST_OUTPUT" | grep -q 'FAILED (errors='; then
            echo '<details><summary><span style="color:red;font-weight:bold;">‚ùå Backend Tests Failed (click to expand)</span></summary>' >> $GITHUB_STEP_SUMMARY
            echo '' >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "$BACKEND_TEST_OUTPUT" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo '</details>' >> $GITHUB_STEP_SUMMARY
          elif echo "$BACKEND_TEST_OUTPUT" | grep -q 'ValidationError'; then
            echo '<details open><summary><span style="color:red;font-weight:bold;">‚ùå Backend Environment Error (click to expand)</span></summary>' >> $GITHUB_STEP_SUMMARY
            echo '' >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "$BACKEND_TEST_OUTPUT" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo '<br><b>‚ùóÔ∏è Environment variables missing for backend tests. See error details above.</b>' >> $GITHUB_STEP_SUMMARY
            echo '</details>' >> $GITHUB_STEP_SUMMARY
          else
            echo '<details open><summary><span style="color:green;font-weight:bold;">‚úÖ Backend Tests Passed (click to expand)</span></summary>' >> $GITHUB_STEP_SUMMARY
            echo '' >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "$BACKEND_TEST_OUTPUT" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo '</details>' >> $GITHUB_STEP_SUMMARY
          fi
          echo '' >> $GITHUB_STEP_SUMMARY
          echo "### Backend Coverage Summary" >> $GITHUB_STEP_SUMMARY
          BACKEND_COV=$(docker run --rm hedlaron/microadventures-backend:${IMAGE_TAG}-test cat /app/htmlcov/index.html 2>/dev/null | grep -A 10 '<h2>Coverage summary' | head -n 12)
          if [ -z "$BACKEND_COV" ]; then
            echo '<span style="color:orange;">‚ö†Ô∏è No backend coverage report found.</span>' >> $GITHUB_STEP_SUMMARY
          else
            echo '```html' >> $GITHUB_STEP_SUMMARY
            echo "$BACKEND_COV" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
        elif [[ "$COMPONENT" == "frontend" ]]; then
          echo "‚úÖ Frontend Docker build completed successfully"
          echo "## üé® Frontend Test Results" >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY
          FRONTEND_TEST_OUTPUT=$(docker run --rm hedlaron/microadventures-frontend:${IMAGE_TAG}-test npm run test:coverage 2>&1)
          # Extract test summary line (e.g. 'Test Files  3 passed | 0 failed')
          FRONTEND_TEST_SUMMARY=$(echo "$FRONTEND_TEST_OUTPUT" | grep -E 'Test Files|Tests:|Suites:|Snapshots:|Time:')
          # Extract coverage percent (e.g. 'Statements   : 95.00%')
          FRONTEND_COV_PCT=$(echo "$FRONTEND_TEST_OUTPUT" | grep -E 'Statements\s*:' | awk -F: '{print $2}' | awk '{print $1}')
          echo "**Frontend Test Summary:**" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "$FRONTEND_TEST_SUMMARY" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          if [ -n "$FRONTEND_COV_PCT" ]; then
            echo "**Frontend Coverage:** $FRONTEND_COV_PCT" >> $GITHUB_STEP_SUMMARY
          fi
          if echo "$FRONTEND_TEST_OUTPUT" | grep -q 'FAIL'; then
            echo '<details><summary><span style="color:red;font-weight:bold;">‚ùå Frontend Tests Failed (click to expand)</span></summary>' >> $GITHUB_STEP_SUMMARY
            echo '' >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "$FRONTEND_TEST_OUTPUT" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo '</details>' >> $GITHUB_STEP_SUMMARY
          elif echo "$FRONTEND_TEST_OUTPUT" | grep -q 'No tests found'; then
            echo '<span style="color:orange;">‚ö†Ô∏è No frontend tests found or executed.</span>' >> $GITHUB_STEP_SUMMARY
          else
            echo '<details open><summary><span style="color:green;font-weight:bold;">‚úÖ Frontend Tests Passed (click to expand)</span></summary>' >> $GITHUB_STEP_SUMMARY
            echo '' >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "$FRONTEND_TEST_OUTPUT" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo '</details>' >> $GITHUB_STEP_SUMMARY
          fi
          echo '' >> $GITHUB_STEP_SUMMARY
          echo "### Frontend Coverage Summary" >> $GITHUB_STEP_SUMMARY
          FRONTEND_COV=$(docker run --rm hedlaron/microadventures-frontend:${IMAGE_TAG}-test cat /usr/src/app/coverage/coverage-summary.json 2>/dev/null)
          if [ -z "$FRONTEND_COV" ]; then
            echo '<span style="color:orange;">‚ö†Ô∏è No frontend coverage report found.</span>' >> $GITHUB_STEP_SUMMARY
          else
            echo '```json' >> $GITHUB_STEP_SUMMARY
            echo "$FRONTEND_COV" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
        fi
