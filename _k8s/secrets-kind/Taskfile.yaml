version: "3"

tasks:
  list:
    desc: "List available tasks for kind cluster hardening"
    cmds:
      - task --list

  prerequisites:
    desc: "Check prerequisites for kind cluster hardening"
    cmds:
      - echo "Checking prerequisites..."
      - echo "1. Kind cluster:"
      - kubectl cluster-info --context kind-kind
      - echo "2. GCP service account (gcloud CLI):"
      - gcloud auth list
      - echo "3. Helm (if still needed for other components):"
      - helm version --short

  create-microadventures-namespace:
    desc: "Create microadventures namespace in kind cluster"
    cmds:
      - echo "Creating microadventures namespace..."
      - kubectl config use-context kind-kind
      - kubectl create namespace microadventures --dry-run=client -o yaml | kubectl apply -f -
      - echo "‚úÖ microadventures namespace created"

  create-gcp-secrets-manually:
    desc: "Manually retrieve secrets from GCP Secret Manager and create Kubernetes secret"
    deps: [create-microadventures-namespace]
    cmds:
      - echo "Retrieving secrets from GCP Secret Manager and creating Kubernetes secret..."
      - kubectl config use-context kind-kind
      - |
        DATABASE_URL=$(gcloud secrets versions access latest --secret=database-url)
        JWT_SECRET_KEY=$(gcloud secrets versions access latest --secret=jwt-secret-key)
        OPENAI_API_KEY=$(gcloud secrets versions access latest --secret=openai-api-key)
        POSTGRES_USER=$(gcloud secrets versions access latest --secret=postgresql-user)
        POSTGRES_PASSWORD=$(gcloud secrets versions access latest --secret=postgresql-password)

        kubectl create secret generic microadventures-gcp-secrets -n microadventures \
          --from-literal=DATABASE_URL="${DATABASE_URL}" \
          --from-literal=JWT_SECRET_KEY="${JWT_SECRET_KEY}" \
          --from-literal=OPENAI_API_KEY="${OPENAI_API_KEY}" \
          --from-literal=POSTGRES_USER="${POSTGRES_USER}" \
          --from-literal=POSTGRES_PASSWORD="${POSTGRES_PASSWORD}" \
          --dry-run=client -o yaml | kubectl apply -f -
      - echo "‚úÖ Kubernetes secret 'microadventures-gcp-secrets' created/updated."

  verify-secrets:
    desc: "Verify that the Kubernetes secret was created"
    cmds:
      - echo "Verifying Kubernetes secret..."
      - kubectl config use-context kind-kind
      - kubectl get secret microadventures-gcp-secrets -n microadventures
      - echo "‚úÖ Secret verification complete!"

  test-secret-values:
    desc: "Test secret values (for debugging - shows actual values)"
    cmds:
      - echo "üîç Testing secret values from Kubernetes secret..."
      - kubectl config use-context kind-kind
      - echo "Database URL:"
      - kubectl get secret microadventures-gcp-secrets -n microadventures -o jsonpath='{.data.DATABASE_URL}' | base64 -d && echo
      - echo "PostgreSQL User:"
      - kubectl get secret microadventures-gcp-secrets -n microadventures -o jsonpath='{.data.POSTGRES_USER}' | base64 -d && echo
      - echo "JWT Secret Key:"
      - kubectl get secret microadventures-gcp-secrets -n microadventures -o jsonpath='{.data.JWT_SECRET_KEY}' | base64 -d && echo
      - echo "‚úÖ Secret values test complete!"

  cleanup:
    desc: "Clean up manually created secrets and namespaces (WARNING: Destructive)"
    cmds:
      - echo "üö® This will remove manually created secrets and namespaces from kind cluster"
      - kubectl config use-context kind-kind
      - echo "Deleting microadventures-gcp-secrets..."
      - kubectl delete secret microadventures-gcp-secrets -n microadventures --ignore-not-found
      - echo "Deleting microadventures namespace..."
      - kubectl delete namespace microadventures --ignore-not-found
      - echo "Deleting external-secrets namespace (if exists)..."
      - kubectl delete namespace external-secrets --ignore-not-found
      - echo "Deleting cert-manager namespace (if exists)..."
      - kubectl delete namespace cert-manager --ignore-not-found
      - echo "‚úÖ Cleanup complete"

  setup-kind-secrets:
    desc: "Complete setup for kind cluster with GCP secrets (manual approach)"
    deps: [prerequisites, create-gcp-secrets-manually]
    cmds:
      - echo "üéâ Kind cluster GCP secrets setup complete!"
      - echo "‚úÖ Kubernetes secret 'microadventures-gcp-secrets' available in cluster"
      - task: verify-secrets
